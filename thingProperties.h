// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

const char DEVICE_LOGIN_NAME[]  = "THIS SECTION WILL AUTOMATICCALLY GENERATE";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_OPTIONAL_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password

void onLatitudeChange();
void onLongitudeChange();
void onVoltageChange();
void onUltraSensorChange();
void onUltrasensorBackChange();
void onLocationChange();
void onBatNotificationChange();
void onBnotificationChange();
void onFnotificationChange();
void onForwardChange();
void onReverseChange();
void onTurnLeftChange();
void onTurnRightChange();

float latitude;
float longitude;
float voltage;
int bat_percentage;
int ultraSensor;
int ultrasensor_Back;
CloudLocation location;
bool bat_Notification;
bool bnotification;
bool fnotification;
bool forward;
bool reverse;
bool turnLeft;
bool turnRight;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(latitude, READWRITE, ON_CHANGE, onLatitudeChange);
  ArduinoCloud.addProperty(longitude, READWRITE, ON_CHANGE, onLongitudeChange);
  ArduinoCloud.addProperty(voltage, READWRITE, ON_CHANGE, onVoltageChange);
  ArduinoCloud.addProperty(bat_percentage, READ, ON_CHANGE, NULL);
  ArduinoCloud.addProperty(ultraSensor, READWRITE, ON_CHANGE, onUltraSensorChange);
  ArduinoCloud.addProperty(ultrasensor_Back, READWRITE, ON_CHANGE, onUltrasensorBackChange);
  ArduinoCloud.addProperty(location, READWRITE, ON_CHANGE, onLocationChange);
  ArduinoCloud.addProperty(bat_Notification, READWRITE, ON_CHANGE, onBatNotificationChange);
  ArduinoCloud.addProperty(bnotification, READWRITE, ON_CHANGE, onBnotificationChange);
  ArduinoCloud.addProperty(fnotification, READWRITE, ON_CHANGE, onFnotificationChange);
  ArduinoCloud.addProperty(forward, READWRITE, ON_CHANGE, onForwardChange);
  ArduinoCloud.addProperty(reverse, READWRITE, ON_CHANGE, onReverseChange);
  ArduinoCloud.addProperty(turnLeft, READWRITE, ON_CHANGE, onTurnLeftChange);
  ArduinoCloud.addProperty(turnRight, READWRITE, ON_CHANGE, onTurnRightChange);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
